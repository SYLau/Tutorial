This is an example of an actual coding project.
The code consists of multiple .f90 files. They can be divided into two types:
(1) program files (stored in projects\proj_test*\), these are problem-specific
(2) module files (usually stored in src\), that are shared among multiple code projects

##########################################################################################################
Using CodeBlocks
##########################################################################################################
In Code Blocks, a single project file (.cbp) can have multiple "build targets".
Each target can only contain one single program file (here named main.f90, but can be changed to anything).
Each target is problem-specific. We create one main.f90 file for each problem and assign each of them to individual target.
Different targets can share the same set or different set of module files (stored under src\)
It is a good practice to use multiple targets for a medium/large scale code.

To create a new "build target":
1. Make sure you have a directory for the problem (e.g., projects\proj_test*\)
2. Under management > right click on project file > Properties > Build targets
3. Add/ Duplicate a Build target, and put in or change the following:
	a. Output filename: specify the path for the compiled executable (this is where the compiled code will be located.)
	b. Execution working dir: specify the working directory (Important: this is where the code is run from.)
	c. Objects output dir: specify the path to store the compiled objects (the modules will be compiled to objects before the code is compiled.)

To select which module files to include:
Under management > right click on project file > Properties > Build targets > Check/ uncheck Build Target Files
Or management > right click on a fortran file (.f90) > Properties > Build > Check/ uncheck Build Target Files

As an example, in this code I would put:
	Output filename = 		    proj_test*\bin\test*\proj_test*.exe
	Execution working dir = 	proj_test*\
	Objects output dir = 		proj_test*\obj\text*
proj_test*\ is the directory I created for this problem.
test* is the name of the target
bin\ is a (autogenerated) folder to store the output exe
obj\ is a (autogenerated) folder to store the complied objects

##########################################################################################################
Using Makefiles
##########################################################################################################
When not using an IDE, one can use Makefiles. These files store the compilation commands and can be run using GNU Make or similar "Make" utilities.
In this tutorial, the basic Makefiles are provided (named "Makefile_basic"). After install GNU make, they can be run with the command:
	make -f Makefile_basic
Another Makefile generated by CodeBlocks is provided. This makefile uses "GNU make" syntax so the source file paths are more flexible. Compiler flags are also used.
The output .exe files are stored inside bin/Debug/ and the object files are under obj/Debug/


To check the results of each program, use plot_test*.gp. They require gnuplot to run.
